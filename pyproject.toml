[build-system]  # https://docs.astral.sh/uv/concepts/projects/config/#build-systems
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[project]  # https://packaging.python.org/en/latest/specifications/pyproject-toml/
name = "pyclarity"
version = "0.1.0"
description = "Cognitive tools for strategic thinking and decision-making via MCP server."
readme = "README.md"
authors = [
  { name = "Kevin Hill", email = "kevin@geodexes.com" },
]
license = { text = "MIT" }
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Framework :: FastAPI",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["mcp", "cognitive-tools", "ai", "decision-making", "strategic-thinking", "fastmcp"]
requires-python = ">=3.12,<4.0"
dependencies = [
  # Core MCP server framework
  "fastmcp>=2.10.6",
  # Data processing and scientific computing
  "numpy>=2.3.2",
  # Data validation and models
  "pydantic>=2.11.7",
  # CLI interface
  "typer>=0.15.1",
  "rich>=13.0.0",
  # Graph algorithms for cognitive tools
  "networkx>=3.0",
  "chonkie[all]>=1.1.1",
  "loguru>=0.7.3",
  "anthropic>=0.60.0",
  "groq>=0.30.0",
  "reward-kit[trl]>=0.4.1",
]

[project.scripts]  # https://docs.astral.sh/uv/concepts/projects/config/#command-line-interfaces
pyclarity = "pyclarity.cli:app"

[project.urls]  # https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
homepage = "https://github.com/kevinhill/PyClarity"
source = "https://github.com/kevinhill/PyClarity"
changelog = "https://github.com/kevinhill/PyClarity/blob/main/CHANGELOG.md"
releasenotes = "https://github.com/kevinhill/PyClarity/releases"
documentation = "https://github.com/kevinhill/PyClarity"
issues = "https://github.com/kevinhill/PyClarity/issues"

[project.optional-dependencies]
# Optional performance enhancements
performance = [
  "uvloop>=0.19.0",  # Faster event loop for asyncio
  "orjson>=3.9.0",   # Faster JSON serialization
]
# Visualization support for cognitive tools
visualization = [
  "matplotlib>=3.8.0",
  "plotly>=5.18.0",
  "graphviz>=0.20.0",
]
# All optional dependencies
all = ["pyclarity[performance,visualization]"]

[dependency-groups]  # https://docs.astral.sh/uv/concepts/projects/dependencies/#development-dependencies
dev = [
  # Version management and commit standards
  "commitizen>=4.3.0",
  
  # Testing framework and plugins
  "pytest>=8.3.4",
  "pytest-asyncio>=0.21.0",  # For async test support
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.14.0",
  "pytest-testmon>=2.1.3",
  "pytest-xdist>=3.6.1",
  "coverage[toml]>=7.6.10",
  
  # Type checking and linting
  "mypy>=1.14.1",
  "ruff>=0.9.2",
  "pre-commit>=4.0.1",
  "typeguard>=4.4.1",
  
  # Documentation generation
  "pdoc>=15.0.1",
  
  # Development tools
  "ipykernel>=6.29.4",
  "ipython>=8.18.0",
  "ipywidgets>=8.1.2",
  "poethepoet>=0.32.1",
  
  # Type stubs for better IDE support
  "types-aiofiles>=24.1.0",
  "types-setuptools>=75.6.0",
]

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
bump_message = "bump: v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version_provider = "uv"

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["src", "tests"]
xfail_strict = true
# Enable asyncio support
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]  # https://docs.astral.sh/ruff/settings/
fix = true
line-length = 100
src = ["src", "tests"]
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["A", "ASYNC", "B", "BLE", "C4", "C90", "D", "DTZ", "E", "EM", "ERA", "F", "FBT", "FLY", "FURB", "G", "I", "ICN", "INP", "INT", "ISC", "LOG", "N", "NPY", "PERF", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "Q", "RET", "RSE", "RUF", "S", "SIM", "SLF", "SLOT", "T10", "T20", "TC", "TID", "TRY", "UP", "W", "YTT"]
ignore = ["D203", "D213", "E501", "RET504", "S101", "S307"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.poe.executor]  # https://github.com/nat-n/poethepoet
type = "simple"

[tool.poe.tasks]

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      pyclarity
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: numpy)"
    name = "docformat"
    options = ["--docformat"]
    default = "numpy"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this package"
  cmd = """
    pre-commit run
      --all-files
      --color always
    """

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"

[tool.hatch.version]
path = "src/pyclarity/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
  "src/",
  "tests/",
  "README.md",
  "LICENSE",
  "CHANGELOG.md",
]
exclude = [
  "/.github",
  "/.devcontainer",
  "/docs",
  "*.pyc",
  "__pycache__",
]

[tool.hatch.build.targets.wheel]
packages = ["src/pyclarity"]
